class Pentagon:
    def __init__(self, Ax, Ay, Bx, By, Cx, Cy, Dx, Dy, Ex, Ey):
        self.A_coord = [Ax, Ay]
        self.B_coord = [Bx, By]
        self.C_coord = [Cx, Cy]
        self.D_coord = [Dx, Dy]
        self.E_coord = [Ex, Ey]
        self.MIN_X = min(self.A_coord[0], self.B_coord[0], self.C_coord[0], self.D_coord[0], self.E_coord[0])
        self.MAX_X = max(self.A_coord[0], self.B_coord[0], self.C_coord[0], self.D_coord[0], self.E_coord[0])
        self.MIN_Y = min(self.A_coord[1], self.B_coord[1], self.C_coord[1], self.D_coord[1], self.E_coord[1])
        self.MAX_Y = max(self.A_coord[1], self.B_coord[1], self.C_coord[1], self.D_coord[1], self.E_coord[1])

    def print_koord(self, count_pent):
        print(f"Координаты пятиугольника №{count_pent}:")
        print(f"A - {self.A_coord}")
        print(f"B - {self.B_coord}")
        print(f"C - {self.C_coord}")
        print(f"D - {self.D_coord}")
        print(f"E - {self.E_coord}\n")

    def make_pent(self):
        while True:
            flag = 0
            self.A_coord = [0, 0]
            self.B_coord = [input_dannyh("Введите коорд-ты B.\n"), input_dannyh("")]
            self.C_coord = [input_dannyh("Введите коорд-ты C.\n"), input_dannyh("")]
            self.D_coord = [input_dannyh("Введите коорд-ты D.\n"), input_dannyh("")]
            self.E_coord = [input_dannyh("Введите коорд-ты E.\n"), input_dannyh("")]
            flag += look_peresech(self.A_coord, self.B_coord, self.C_coord, self.D_coord)
            flag += look_peresech(self.A_coord, self.B_coord, self.D_coord, self.E_coord)
            flag += look_peresech(self.B_coord, self.C_coord, self.D_coord, self.E_coord)
            flag += look_peresech(self.B_coord, self.C_coord, self.E_coord, self.A_coord)
            flag += look_peresech(self.C_coord, self.D_coord, self.E_coord, self.A_coord)
            self.MIN_X = min(self.A_coord[0], self.B_coord[0], self.C_coord[0], self.D_coord[0], self.E_coord[0])
            self.MAX_X = max(self.A_coord[0], self.B_coord[0], self.C_coord[0], self.D_coord[0], self.E_coord[0])
            self.MIN_Y = min(self.A_coord[1], self.B_coord[1], self.C_coord[1], self.D_coord[1], self.E_coord[1])
            self.MAX_Y = max(self.A_coord[1], self.B_coord[1], self.C_coord[1], self.D_coord[1], self.E_coord[1])
            if (flag == 5): break
            print("Введите по-новой коорд-ты.")

    def move_pent(self, Ax, Ay, Bx, By, Cx, Cy, Dx, Dy, Ex, Ey):
        x = input_dannyh("На сколько вы хотите сместить фигуру по X?\n")
        y = input_dannyh("На сколько вы хотите сместить фигуру по Y?\n")
        self.A_coord = [Ax + x, Ay + y]
        self.B_coord = [Bx + x, By + y]
        self.C_coord = [Cx + x, Cy + y]
        self.D_coord = [Dx + x, Dy + y]
        self.E_coord = [Ex + x, Ey + y]
        self.MIN_X += x
        self.MAX_X += x
        self.MIN_Y += y
        self.MAX_Y += y


class Rectangle:
    def __init__(self, Ax, Ay, Bx, By, Cx, Cy, Dx, Dy):
        self.A_coord = [Ax, Ay]
        self.B_coord = [Bx, By]
        self.C_coord = [Cx, Cy]
        self.D_coord = [Dx, Dy]
        self.MIN_X = min(self.A_coord[0], self.B_coord[0], self.C_coord[0], self.D_coord[0])
        self.MAX_X = max(self.A_coord[0], self.B_coord[0], self.C_coord[0], self.D_coord[0])
        self.MIN_Y = min(self.A_coord[1], self.B_coord[1], self.C_coord[1], self.D_coord[1])
        self.MAX_Y = max(self.A_coord[1], self.B_coord[1], self.C_coord[1], self.D_coord[1])

    def make_koord(self):
        hight = input_dannyh("Высота-")
        wight = input_dannyh("Ширина-")
        self.A_coord = [0, 0]
        self.B_coord = [0, hight]
        self.C_coord = [wight, hight]
        self.D_coord = [wight, 0]
        self.MIN_X = min(self.A_coord[0], self.B_coord[0], self.C_coord[0], self.D_coord[0])
        self.MAX_X = max(self.A_coord[0], self.B_coord[0], self.C_coord[0], self.D_coord[0])
        self.MIN_Y = min(self.A_coord[1], self.B_coord[1], self.C_coord[1], self.D_coord[1])
        self.MAX_Y = max(self.A_coord[1], self.B_coord[1], self.C_coord[1], self.D_coord[1])

    def move_rect(self, Ax, Ay, Bx, By, Cx, Cy, Dx, Dy):
        x = input_dannyh("На сколько вы хотите сместить фигуру по X?\n")
        y = input_dannyh("На сколько вы хотите сместить фигуру по Y?\n")
        self.A_coord = [Ax + x, Ay + y]
        self.B_coord = [Bx + x, By + y]
        self.C_coord = [Cx + x, Cy + y]
        self.D_coord = [Dx + x, Dy + y]
        self.MIN_X += x
        self.MAX_X += x
        self.MIN_Y += y
        self.MAX_Y += y

    def print_koord_rect(self, count_rect):
        print(f"Координаты прямоугольника №{count_rect}:")
        print(f"A - {self.A_coord}")
        print(f"B - {self.B_coord}")
        print(f"C - {self.C_coord}")
        print(f"D - {self.D_coord}\n")


rectangle_books = []
pentagon_books = []
shape_books = []


def look_peresech(A, B, C, D):
    A1 = A[1] - B[1]
    B1 = B[0] - A[0]
    C1 = A[0] * B[1] - B[0] * A[1]
    A2 = C[1] - D[1]
    B2 = D[1] - C[1]
    C2 = C[0] * D[1] - D[0] * C[1]
    if (B1 * A2 - B2 * A1 != 0) and (A1 != 0):
        y = (C2 * A1 - C1 * A2) / (B1 * A2 - B2 * A1)
        x = (-C1 - B1 * y) / A1
        if min(A[0], B[0]) <= x <= max(A[0], B[0]) and min(A[1], B[1]) <= y <= max(A[1], B[1]):
            print('Есть пересечения отрезков.\n')
            return 0
        else:
            # print('Точки пересечения отрезков нет.')
            return 1
    elif B1 * A2 - B2 * A1 and A2:

        y = (C2 * A1 - C1 * A2) / (B1 * A2 - B2 * A1)
        x = (-C2 - B2 * y) / A2
        if min(A[0], B[0]) <= x <= max(A[0], B[0]) and min(A[1], B[1]) <= y <= max(A[1], B[1]):
            print('Есть пересечения отрезков.\n')
            return 0

        else:
            return 1




    else:
        return 1


def input_dannyh(text):
    while True:
        num = input(text)
        if num.isdigit():
            return int(num)
            break
        else:
            print("Введено не число.")


def input_necessery_shape(text, n, text1):
    list = ("1", "2")
    while True:
        num = input(text)
        if num.isdigit():
            if (num in list):
                if (num == "1"):
                    num = input(text1)
                    if num.isdigit():
                        if (0 < int(num) <= n):
                            return int(num), 1
                            break
                        else:
                            print("Данный № не нашёлся")
                else:
                    return 0, 0
                    break
            else:
                print("Введено не то число.")
        else:
            print("Введено не число.")


def input_menu():
    my_list = (1, 2, 3, 4, 5, 6, 7)
    while True:
        num = input(f"Введите указанное число\n")
        if num.isdigit():
            num = int(num)
            if num in my_list:
                return num
                break
            else:
                print("Введите Нужное число")
        else:
            print("Вы должны ввести указанное число, попробуйте снова.")


def make_rectangle(count_rect):
    print("Задайте высоту и ширину прямоугольника.")
    rectangle_books.append(Rectangle(0, 0, 0, 0, 0, 0, 0, 0))
    rectangle_books[count_rect - 1].make_koord()
    shape_books.append(rectangle_books[count_rect - 1])
    rectangle_books[count_rect - 1].print_koord_rect(count_rect)


def move_rect(count_rect):
    ness_rect, flag = input_necessery_shape("1-Выбрать № прямоугольника?\n2-выйти.\n", count_rect, "Какой № изменить?")
    if flag == 1:
        mass_Ax = rectangle_books[ness_rect - 1].A_coord[0]
        mass_Ay = rectangle_books[ness_rect - 1].A_coord[1]
        mass_Bx = rectangle_books[ness_rect - 1].B_coord[0]
        mass_By = rectangle_books[ness_rect - 1].B_coord[1]
        mass_Cx = rectangle_books[ness_rect - 1].C_coord[0]
        mass_Cy = rectangle_books[ness_rect - 1].C_coord[1]
        mass_Dx = rectangle_books[ness_rect - 1].D_coord[0]
        mass_Dy = rectangle_books[ness_rect - 1].D_coord[1]
        rectangle_books[ness_rect - 1].move_rect(mass_Ax, mass_Ay, mass_Bx, mass_By, mass_Cx, mass_Cy, mass_Dx, mass_Dy)


def move_pent(count_pent):
    ness_pent, flag = input_necessery_shape("1-Выбрать № пятиугольника?\n2-выйти.\n", count_pent, "Какой № изменить?")
    if (flag == 1):
        mass_Ax = pentagon_books[ness_pent - 1].A_coord[0]
        mass_Ay = pentagon_books[ness_pent - 1].A_coord[1]
        mass_Bx = pentagon_books[ness_pent - 1].B_coord[0]
        mass_By = pentagon_books[ness_pent - 1].B_coord[1]
        mass_Cx = pentagon_books[ness_pent - 1].C_coord[0]
        mass_Cy = pentagon_books[ness_pent - 1].C_coord[1]
        mass_Dx = pentagon_books[ness_pent - 1].D_coord[0]
        mass_Dy = pentagon_books[ness_pent - 1].D_coord[1]
        mass_Ex = pentagon_books[ness_pent - 1].E_coord[0]
        mass_Ey = pentagon_books[ness_pent - 1].E_coord[1]
        pentagon_books[ness_pent - 1].move_pent(mass_Ax, mass_Ay, mass_Bx, mass_By, mass_Cx, mass_Cy, mass_Dx, mass_Dy,
                                                mass_Ex, mass_Ey)


def make_pentagon(count_pent):
    pentagon_books.append(Pentagon(0, 0, 0, 0, 0, 0, 0, 0, 0, 0))
    pentagon_books[count_pent - 1].make_pent()
    shape_books.append(pentagon_books[count_pent - 1])
    pentagon_books[count_pent - 1].print_koord(count_pent)


def watch_shapes(count_shapes, count_rect):
    print(count_shapes)
    count_rect_i = 0
    count_pent_i = 0
    if (count_shapes > 0):
        for i in range(count_shapes):
            if (count_rect > 0) and (rectangle_books[count_rect_i] == shape_books[i]):
                rectangle_books[count_rect_i].print_koord_rect(i + 1)
                count_rect_i += 1
            else:
                pentagon_books[count_pent_i].print_koord(i + 1)
                count_pent_i += 1

    else:
        print("Вы ещё не работали.")


def rectangle_in_rectangle(number_shape1, number_shape2, j1, j2):
    if (rectangle_books[j2].MIN_X > rectangle_books[j1].MIN_X) and (
            rectangle_books[j2].MAX_X < rectangle_books[j1].MAX_X) and (
            rectangle_books[j2].MIN_Y > rectangle_books[j1].MIN_Y) and (
            rectangle_books[j2].MAX_Y < rectangle_books[j1].MAX_Y):
        print(f"Фигура под № {number_shape2} включается в фигуру под № {number_shape1} ")
    else:
        print(f"Фигура под № {number_shape2} не включается в фигуру под № {number_shape1} ")


def pentagon_in_rectangle(number_shape1, number_shape2, j1, j2):
    flag = 0
    if (pentagon_books[j2].MIN_X > rectangle_books[j1].MIN_X) and (
            pentagon_books[j2].MAX_X < rectangle_books[j1].MAX_X) and (
            pentagon_books[j2].MIN_Y > rectangle_books[j1].MIN_Y) and (
            pentagon_books[j2].MAX_Y < rectangle_books[j1].MAX_Y):
        flag += look_peresech(pentagon_books[j2].A_coord, pentagon_books[j2].B_coord, rectangle_books[j1].A_coord,
                              rectangle_books[j1].B_coord)
        flag += look_peresech(pentagon_books[j2].A_coord, pentagon_books[j2].B_coord, rectangle_books[j1].B_coord,
                              rectangle_books[j1].C_coord)
        flag += look_peresech(pentagon_books[j2].A_coord, pentagon_books[j2].B_coord, rectangle_books[j1].C_coord,
                              rectangle_books[j1].D_coord)
        flag += look_peresech(pentagon_books[j2].A_coord, pentagon_books[j2].B_coord, rectangle_books[j1].D_coord,
                              rectangle_books[j1].A_coord)

        flag += look_peresech(pentagon_books[j2].B_coord, pentagon_books[j2].C_coord, rectangle_books[j1].A_coord,
                              rectangle_books[j1].B_coord)
        flag += look_peresech(pentagon_books[j2].B_coord, pentagon_books[j2].C_coord, rectangle_books[j1].B_coord,
                              rectangle_books[j1].C_coord)
        flag += look_peresech(pentagon_books[j2].B_coord, pentagon_books[j2].C_coord, rectangle_books[j1].C_coord,
                              rectangle_books[j1].D_coord)
        flag += look_peresech(pentagon_books[j2].B_coord, pentagon_books[j2].C_coord, rectangle_books[j1].D_coord,
                              rectangle_books[j1].A_coord)

        flag += look_peresech(pentagon_books[j2].C_coord, pentagon_books[j2].D_coord, rectangle_books[j1].A_coord,
                              rectangle_books[j1].B_coord)
        flag += look_peresech(pentagon_books[j2].C_coord, pentagon_books[j2].D_coord, rectangle_books[j1].B_coord,
                              rectangle_books[j1].C_coord)
        flag += look_peresech(pentagon_books[j2].C_coord, pentagon_books[j2].D_coord, rectangle_books[j1].C_coord,
                              rectangle_books[j1].D_coord)
        flag += look_peresech(pentagon_books[j2].C_coord, pentagon_books[j2].D_coord, rectangle_books[j1].D_coord,
                              rectangle_books[j1].A_coord)

        flag += look_peresech(pentagon_books[j2].D_coord, pentagon_books[j2].E_coord, rectangle_books[j1].A_coord,
                              rectangle_books[j1].B_coord)
        flag += look_peresech(pentagon_books[j2].D_coord, pentagon_books[j2].E_coord, rectangle_books[j1].B_coord,
                              rectangle_books[j1].C_coord)
        flag += look_peresech(pentagon_books[j2].D_coord, pentagon_books[j2].E_coord, rectangle_books[j1].C_coord,
                              rectangle_books[j1].D_coord)
        flag += look_peresech(pentagon_books[j2].D_coord, pentagon_books[j2].E_coord, rectangle_books[j1].D_coord,
                              rectangle_books[j1].A_coord)

        flag += look_peresech(pentagon_books[j2].E_coord, pentagon_books[j2].A_coord, rectangle_books[j1].A_coord,
                              rectangle_books[j1].B_coord)
        flag += look_peresech(pentagon_books[j2].E_coord, pentagon_books[j2].A_coord, rectangle_books[j1].B_coord,
                              rectangle_books[j1].C_coord)
        flag += look_peresech(pentagon_books[j2].E_coord, pentagon_books[j2].A_coord, rectangle_books[j1].C_coord,
                              rectangle_books[j1].D_coord)
        flag += look_peresech(pentagon_books[j2].E_coord, pentagon_books[j2].A_coord, rectangle_books[j1].D_coord,
                              rectangle_books[j1].A_coord)
        if (flag == 20):
            print(f"Фигура под № {number_shape2} включается в фигуру под № {number_shape1} ")
        else:
            print(f"Фигура под № {number_shape2} не включается в фигуру под № {number_shape1} ")
    else:
        print(f"Фигура под № {number_shape2} не включается в фигуру под № {number_shape1} ")


def rectangle_in_pentagon(number_shape1, number_shape2, j1, j2):
    flag = 0
    if (pentagon_books[j1].MIN_X < rectangle_books[j2].MIN_X) and (
            pentagon_books[j1].MAX_X > rectangle_books[j2].MAX_X) and (
            pentagon_books[j1].MIN_Y < rectangle_books[j2].MIN_Y) and (
            pentagon_books[j1].MAX_Y > rectangle_books[j2].MAX_Y):
        flag += look_peresech(pentagon_books[j1].A_coord, pentagon_books[j1].B_coord, rectangle_books[j2].A_coord,
                              rectangle_books[j2].B_coord)
        flag += look_peresech(pentagon_books[j1].A_coord, pentagon_books[j1].B_coord, rectangle_books[j2].B_coord,
                              rectangle_books[j2].C_coord)
        flag += look_peresech(pentagon_books[j1].A_coord, pentagon_books[j1].B_coord, rectangle_books[j2].C_coord,
                              rectangle_books[j2].D_coord)
        flag += look_peresech(pentagon_books[j1].A_coord, pentagon_books[j1].B_coord, rectangle_books[j2].D_coord,
                              rectangle_books[j2].A_coord)

        flag += look_peresech(pentagon_books[j1].B_coord, pentagon_books[j1].C_coord, rectangle_books[j2].A_coord,
                              rectangle_books[j2].B_coord)
        flag += look_peresech(pentagon_books[j1].B_coord, pentagon_books[j1].C_coord, rectangle_books[j2].B_coord,
                              rectangle_books[j2].C_coord)
        flag += look_peresech(pentagon_books[j1].B_coord, pentagon_books[j1].C_coord, rectangle_books[j2].C_coord,
                              rectangle_books[j2].D_coord)
        flag += look_peresech(pentagon_books[j1].B_coord, pentagon_books[j1].C_coord, rectangle_books[j2].D_coord,
                              rectangle_books[j2].A_coord)

        flag += look_peresech(pentagon_books[j1].C_coord, pentagon_books[j1].D_coord, rectangle_books[j2].A_coord,
                              rectangle_books[j2].B_coord)
        flag += look_peresech(pentagon_books[j1].C_coord, pentagon_books[j1].D_coord, rectangle_books[j2].B_coord,
                              rectangle_books[j2].C_coord)
        flag += look_peresech(pentagon_books[j1].C_coord, pentagon_books[j1].D_coord, rectangle_books[j2].C_coord,
                              rectangle_books[j2].D_coord)
        flag += look_peresech(pentagon_books[j1].C_coord, pentagon_books[j1].D_coord, rectangle_books[j2].D_coord,
                              rectangle_books[j2].A_coord)

        flag += look_peresech(pentagon_books[j1].D_coord, pentagon_books[j1].E_coord, rectangle_books[j2].A_coord,
                              rectangle_books[j2].B_coord)
        flag += look_peresech(pentagon_books[j1].D_coord, pentagon_books[j1].E_coord, rectangle_books[j2].B_coord,
                              rectangle_books[j2].C_coord)
        flag += look_peresech(pentagon_books[j1].D_coord, pentagon_books[j1].E_coord, rectangle_books[j2].C_coord,
                              rectangle_books[j2].D_coord)
        flag += look_peresech(pentagon_books[j1].D_coord, pentagon_books[j1].E_coord, rectangle_books[j2].D_coord,
                              rectangle_books[j2].A_coord)

        flag += look_peresech(pentagon_books[j1].E_coord, pentagon_books[j1].A_coord, rectangle_books[j2].A_coord,
                              rectangle_books[j2].B_coord)
        flag += look_peresech(pentagon_books[j1].E_coord, pentagon_books[j1].A_coord, rectangle_books[j2].B_coord,
                              rectangle_books[j2].C_coord)
        flag += look_peresech(pentagon_books[j1].E_coord, pentagon_books[j1].A_coord, rectangle_books[j2].C_coord,
                              rectangle_books[j2].D_coord)
        flag += look_peresech(pentagon_books[j1].E_coord, pentagon_books[j1].A_coord, rectangle_books[j2].D_coord,
                              rectangle_books[j2].A_coord)
        if (flag == 20):
            print(f"Фигура под № {number_shape2} включается в фигуру под № {number_shape1} ")
        else:
            print(f"Фигура под № {number_shape2} не включается в фигуру под № {number_shape1} ")
    else:
        print(f"Фигура под № {number_shape2} не включается в фигуру под № {number_shape1} ")


def pentagon_in_pentagon(number_shape1, number_shape2, j1, j2):
    flag = 0
    if (pentagon_books[j1].MIN_X < pentagon_books[j2].MIN_X) and (
            pentagon_books[j1].MAX_X > pentagon_books[j2].MAX_X) and (
            pentagon_books[j1].MIN_Y < pentagon_books[j2].MIN_Y) and (
            pentagon_books[j1].MAX_Y > pentagon_books[j2].MAX_Y):
        flag += look_peresech(pentagon_books[j1].A_coord, pentagon_books[j1].B_coord, pentagon_books[j2].A_coord,
                              pentagon_books[j2].B_coord)
        flag += look_peresech(pentagon_books[j1].A_coord, pentagon_books[j1].B_coord, pentagon_books[j2].B_coord,
                              pentagon_books[j2].C_coord)
        flag += look_peresech(pentagon_books[j1].A_coord, pentagon_books[j1].B_coord, pentagon_books[j2].C_coord,
                              pentagon_books[j2].D_coord)
        flag += look_peresech(pentagon_books[j1].A_coord, pentagon_books[j1].B_coord, pentagon_books[j2].D_coord,
                              pentagon_books[j2].E_coord)
        flag += look_peresech(pentagon_books[j1].A_coord, pentagon_books[j1].B_coord, pentagon_books[j2].E_coord,
                              pentagon_books[j2].A_coord)

        flag += look_peresech(pentagon_books[j1].B_coord, pentagon_books[j1].C_coord, pentagon_books[j2].A_coord,
                              pentagon_books[j2].B_coord)
        flag += look_peresech(pentagon_books[j1].B_coord, pentagon_books[j1].C_coord, pentagon_books[j2].B_coord,
                              pentagon_books[j2].C_coord)
        flag += look_peresech(pentagon_books[j1].B_coord, pentagon_books[j1].C_coord, pentagon_books[j2].C_coord,
                              pentagon_books[j2].D_coord)
        flag += look_peresech(pentagon_books[j1].B_coord, pentagon_books[j1].C_coord, pentagon_books[j2].D_coord,
                              pentagon_books[j2].E_coord)
        flag += look_peresech(pentagon_books[j1].B_coord, pentagon_books[j1].C_coord, pentagon_books[j2].E_coord,
                              pentagon_books[j2].A_coord)

        flag += look_peresech(pentagon_books[j1].C_coord, pentagon_books[j1].D_coord, pentagon_books[j2].A_coord,
                              pentagon_books[j2].B_coord)
        flag += look_peresech(pentagon_books[j1].C_coord, pentagon_books[j1].D_coord, pentagon_books[j2].B_coord,
                              pentagon_books[j2].C_coord)
        flag += look_peresech(pentagon_books[j1].C_coord, pentagon_books[j1].D_coord, pentagon_books[j2].C_coord,
                              pentagon_books[j2].D_coord)
        flag += look_peresech(pentagon_books[j1].C_coord, pentagon_books[j1].D_coord, pentagon_books[j2].D_coord,
                              pentagon_books[j2].E_coord)
        flag += look_peresech(pentagon_books[j1].C_coord, pentagon_books[j1].D_coord, pentagon_books[j2].E_coord,
                              pentagon_books[j2].A_coord)

        flag += look_peresech(pentagon_books[j1].D_coord, pentagon_books[j1].E_coord, pentagon_books[j2].A_coord,
                              pentagon_books[j2].B_coord)
        flag += look_peresech(pentagon_books[j1].D_coord, pentagon_books[j1].E_coord, pentagon_books[j2].B_coord,
                              pentagon_books[j2].C_coord)
        flag += look_peresech(pentagon_books[j1].D_coord, pentagon_books[j1].E_coord, pentagon_books[j2].C_coord,
                              pentagon_books[j2].D_coord)
        flag += look_peresech(pentagon_books[j1].D_coord, pentagon_books[j1].E_coord, pentagon_books[j2].D_coord,
                              pentagon_books[j2].E_coord)
        flag += look_peresech(pentagon_books[j1].D_coord, pentagon_books[j1].E_coord, pentagon_books[j2].E_coord,
                              pentagon_books[j2].A_coord)

        flag += look_peresech(pentagon_books[j1].E_coord, pentagon_books[j1].A_coord, pentagon_books[j2].A_coord,
                              pentagon_books[j2].B_coord)
        flag += look_peresech(pentagon_books[j1].E_coord, pentagon_books[j1].A_coord, pentagon_books[j2].B_coord,
                              pentagon_books[j2].C_coord)
        flag += look_peresech(pentagon_books[j1].E_coord, pentagon_books[j1].A_coord, pentagon_books[j2].C_coord,
                              pentagon_books[j2].D_coord)
        flag += look_peresech(pentagon_books[j1].E_coord, pentagon_books[j1].A_coord, pentagon_books[j2].D_coord,
                              pentagon_books[j2].E_coord)
        flag += look_peresech(pentagon_books[j1].E_coord, pentagon_books[j1].A_coord, pentagon_books[j2].E_coord,
                              pentagon_books[j2].A_coord)
        if (flag == 25):
            print(f"Фигура под № {number_shape2} включается в фигуру под № {number_shape1} ")
        else:
            print(f"Фигура под № {number_shape2} не включается в фигуру под № {number_shape1} ")
    else:
        print(f"Фигура под № {number_shape2} не включается в фигуру под № {number_shape1} ")


def include_one_in_other(count_pent, count_rect, count_shapes):
    flags = 0
    shape1 = ''
    shape2 = ''
    if count_shapes > 1:
        number_shape1, flag = input_necessery_shape("1-Выбрать № фигуры\n2-выйти.\n", count_shapes,
                                                   "Выберите № фигуры с которой будем сравнивать.\n")
        flags += flag
        number_shape2, flag = input_necessery_shape("1-Выбрать № фигуры\n2-выйти.\n", count_shapes,
                                                   "Выберите № фигуры которая должна быть внутри.\n")
        flags += flag
        if (flags == 2):
            for i in range(count_rect):
                if shape_books[number_shape1 - 1] == rectangle_books[i]:
                    j1 = i
                    shape1 = 'rect'

                if shape_books[number_shape2 - 1] == rectangle_books[i]:
                    j2 = i
                    shape2 = 'rect'

            for i in range(count_pent):
                if shape_books[number_shape1 - 1] == pentagon_books[i]:
                    j1 = i
                    shape1 = 'pent'

                if shape_books[number_shape2 - 1] == pentagon_books[i]:
                    j2 = i
                    shape2 = 'pent'
            if (shape1 == 'rect') and (shape2 == 'rect'):
                rectangle_in_rectangle(number_shape1, number_shape2, j1, j2)
            elif (shape1 == 'rect') and (shape2 == 'pent'):
                pentagon_in_rectangle(number_shape1, number_shape2, j1, j2)
            else:
                pentagon_in_pentagon(number_shape1, number_shape2, j1, j2)

        else:
            print("Команда прекращенна")
    elif (count_shapes > 0):
        print("Недостаточно фигур.")
    else:
        print("Вы еще не работали.")


def menu():
    count_rect = 0
    count_pent = 0
    count_shape = 0
    flag = 1
    while (flag != 0):
        print("Программа для работы с фигурами запущенна.Выберите, что вы хотите сделать")
        print("1-Создать Прямоугольник(Начальные коор-ты=[0,0])")
        print("2-Подвинуть по XY прямоугольник.")
        print("3-Создать Пятиугольник(Начальные коорд-ты=[0,0])")
        print("4-Подвинуть по XY пятиугольник.")
        print("5-Просмотреть ваши фигуры.")
        print("6-проверить на включение одной фигуры в другую.")
        print("7-Выйти.")
        num = input_menu()
        if (num == 1):
            count_rect += 1
            count_shape += 1
            make_rectangle(count_rect)
        elif (num == 2):
            move_rect(count_rect)
        elif (num == 3):
            count_shape += 1
            count_pent += 1
            make_pentagon(count_pent)
        elif (num == 4):
            move_pent(count_pent)
        elif (num == 5):
            pentagon_books[0].print_koord(count_pent)
            watch_shapes(count_shape, count_rect)
        elif (num == 6):
            include_one_in_other(count_pent, count_rect, count_shape)
        else:
            flag -= 1
            print("Программа завершенна.")


if __name__ == '__main__':
    menu()
